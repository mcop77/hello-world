The worst case time complexity for the makeEmpty function for the binary expression tree would be O(n) because in order for the entire tree to be empty, each node has to be deleted. Since every node must be deleted, the time depends on how many nodes, which can be represented by n, have to be visited and deleted. The amount of time it takes is directly related to how many nodes there are in the tree, and that is why it can be considered O(n). Then the cconversion of the postfix to infix expression can be considered O(n) as well. The reason for this is the fact that to convert the expression, the loop has to at least visit all of the nodes in the tree, which depends on how many nodes there are. Then the funtion has to add the parentheses, however this does not add anything to the overall time complexity, because for big O notaion, traversing the tree is the main task the function performs, so it can be called O(n). Once again, there is a direct correlation between the amount of nodes in the tree, and the amount of time it takes.
